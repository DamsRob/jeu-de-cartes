{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class CardService {\n  constructor() {\n    this.hand = [];\n  }\n  //Ajouter une carte à la main \n  addCard(valueCard, colorCard, imgCard) {\n    this.hand.push({\n      value: valueCard,\n      color: colorCard,\n      img: imgCard\n    });\n  }\n  //Vérifier si la nouvelle carte aléatoire générée n'est pas déjà dans la main\n  checkCard(valueCard, colorCard) {\n    if (this.hand.length > 0) {\n      const alreadyCard = this.hand.find(card => card.value == valueCard && card.color == colorCard);\n      return alreadyCard == undefined;\n    }\n    return true;\n  }\n  //Supprimer la main\n  resetHand() {\n    this.hand = [];\n  }\n  static #_ = this.ɵfac = function CardService_Factory(t) {\n    return new (t || CardService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CardService,\n    factory: CardService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["CardService","constructor","hand","addCard","valueCard","colorCard","imgCard","push","value","color","img","checkCard","length","alreadyCard","find","card","undefined","resetHand","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\drobert\\Documents\\Intertcontrat\\jeu-de-cartes\\src\\app\\core\\services\\card.service.ts"],"sourcesContent":["import { Card } from \"../models/card.model\";\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class CardService{\r\n    \r\n    hand: Card[] = []\r\n\r\n    constructor(){}\r\n\r\n    //Ajouter une carte à la main \r\n\r\n    addCard(valueCard: number, colorCard: string, imgCard: string){\r\n            this.hand.push({\r\n                value: valueCard,\r\n                color: colorCard,\r\n                img: imgCard\r\n            })\r\n    }\r\n\r\n    //Vérifier si la nouvelle carte aléatoire générée n'est pas déjà dans la main\r\n\r\n    checkCard(valueCard: number, colorCard: string): boolean {\r\n        if (this.hand.length > 0){\r\n            const alreadyCard = this.hand.find(card => card.value == valueCard && card.color == colorCard)\r\n            return alreadyCard == undefined\r\n        }\r\n        return true\r\n    }\r\n\r\n    //Supprimer la main\r\n\r\n    resetHand(){\r\n        this.hand = []\r\n    }\r\n}\r\n\r\n"],"mappings":";AAOA,OAAM,MAAOA,WAAW;EAIpBC,YAAA;IAFA,KAAAC,IAAI,GAAW,EAAE;EAEH;EAEd;EAEAC,OAAOA,CAACC,SAAiB,EAAEC,SAAiB,EAAEC,OAAe;IACrD,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC;MACXC,KAAK,EAAEJ,SAAS;MAChBK,KAAK,EAAEJ,SAAS;MAChBK,GAAG,EAAEJ;KACR,CAAC;EACV;EAEA;EAEAK,SAASA,CAACP,SAAiB,EAAEC,SAAiB;IAC1C,IAAI,IAAI,CAACH,IAAI,CAACU,MAAM,GAAG,CAAC,EAAC;MACrB,MAAMC,WAAW,GAAG,IAAI,CAACX,IAAI,CAACY,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACP,KAAK,IAAIJ,SAAS,IAAIW,IAAI,CAACN,KAAK,IAAIJ,SAAS,CAAC;MAC9F,OAAOQ,WAAW,IAAIG,SAAS;;IAEnC,OAAO,IAAI;EACf;EAEA;EAEAC,SAASA,CAAA;IACL,IAAI,CAACf,IAAI,GAAG,EAAE;EAClB;EAAC,QAAAgB,CAAA,G;qBA9BQlB,WAAW;EAAA;EAAA,QAAAmB,EAAA,G;WAAXnB,WAAW;IAAAoB,OAAA,EAAXpB,WAAW,CAAAqB,IAAA;IAAAC,UAAA,EAHR;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}